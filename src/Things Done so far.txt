the aim of this repo is to get familiar with the different hooks in the react

EOD: 17-10-22:
    i have made use of the hooks like usestate, useeffect(replicating didmount and didupdate) , usecontext(while sharing movie title from landingcomp to detailedview comp)

MRNG session : 19-10-22:
        i have added the playable video for each movie data retrived from the api.
        i have made use of hooks like useRef,ForwardRef,useimperativeHandle:
        scenarios where i used three hooks are as follows:
        i have made whenever we click the playtrailer button of a movie then we can see the trailer
        but when i clicked the other movie from list( assuming already a trailer was placed) then details of current selected movie would rendered except the old movie trailer was in that place.
        thus new movie click is on landingpage component which encapsule the detailed view component thus i had to find a way to access the innercomponent's resetbackdrop function whenever a new movie is selected on the outer list component
        so i achieved it by the steps:
        create a ref with ur name of choice in outer component (landingpage.js ->resetbackdropref)
        then assign that ref to innercomponent(ref={resetbackdropref} in landingpage.js's line of detailedview component)
        then in the inner component(detailedview) reframe the following that you gonna pass the ref to the inner component's resetbackdrop function thus use the forwardref to whole component wrap
        then we have to send out the logic of resetbackdrop fn thus use the imperative handle to achieve the same
        then in outer component i have placed the necessary innercomponent logic call by 'resetbackdropref.current.resetbackdrop()' call statement in handleclickontrendlist,handleclickonpopularlist
        u can understand forwardref,useimperativeHandle,useRef in https://codesandbox.io/s/variant-1-yvjb1?from-embed=&file=/src/components/Toast/index.js

Post Lunch : 19-10-22:
    added routing between main and search page.. maintained functionalities of searching movies and displaying them in individual components .. achieved backdrop image changing according state var-searchstring changing events
    had brainstormed few ideas for usereducer,usememo,usecallback hook..yet to finalise and implement @time = 3:30pm
    added useNavigate() for home div in searchcomponent
post break : 19-10-22:
        implemented the usereducer with default and add action for usecase of just adding name of the movie alone and viewing it whenever mylist is clicked.
        flow was like in detailedview.js :
                have a initialstate as empty array
                then do the usereducer call like   const[movielist,dispatch]=useReducer(reducer,initiallist)
                then after that define reducer fn : const reducer=(state,action)=>{
                                                        switch(action){
                                                        case "add":
                                                            return [...state,contextvalue] 
                                                        default:
                                                            return state
                                                        }
                                                    }
                then make appropriate dispatch call with action word 'add' in the place ie add/+ button event listener.

MRNG SESSION 20-10-22:
      1)  implemented USEMEMO hook in landingpage.JS, where we have memoized the return value which is nothing but the trendmovies.js,popularmovies.js which would have appropriate movielist array from api fetch result
        justification: we know that once the api hit for list result those popular/trend movielist wont change thus it is better to keep them as memoized where also detailedview component often changing is not memoized.
      2) implemented a custom hook : useDebounce  ---> debouncing is the concept that we use to restrict the unnecessary api call done during search . eg if i search "dhanu" USUALLY 5 API calls will be made like 1 api call for 1 letter
            which is not performance effcient thus we introduce debouncing.
            debouncing provide artificial timeout between keystrokes to lower api calls
            we done it in useDebounce file where 
                        we have a const called debouncedvalue which is taking prop named value as assignment and has a setter method
                        then we did the useeffectwith the logic of setting debounced value with a delay... ie say i have made/ type abc now and debounced value is set as abc ..then i typed defgh but assume delay is not over then the debouncedvalue remains as abc 
                        and changed as defgh only after delay gets over
                        then we made useeffect to return a fn (ie cleanup of the timeout) and made that the useeffect need to be called whenever either delay is over or searchterm is changed(satisfied delay time and got appended to old value)
            then after the hook creation we use it in searchcomponent
                line 43: assign the normal searchterm and delay as params to useDebounce assigned to be debouncedsearchterm
                we gonna pass the fetch with debouncedsearchterm as it is going to have the value of typed search term and delay which is used as params to implement usedebounce  hook in background and dependency array has been debouncedsearchterm 
                as whenever typed value changed this hook effect will be called but useDebounce only decide what need to be there in api search term..ie old value or new value
                ie usedebounce  : say we type 'abc' and it waits for 5 seconds to make api hit..if anything is type between 5 seconds..it gets appended and search else it is done searching with oldterm after 5seconds.